<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0        http://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  	<modelVersion>4.0.0</modelVersion>
  	<groupId>com.softech.ls360</groupId>
  	<artifactId>LS360ApiGatewayModules</artifactId>
  	<version>0.0.1</version>
  	
  	<!-- The parent project doesn’t create a JAR or a WAR; instead, it is simply a POM that refers to other Maven projects. The 
  	     appropriate packaging for a project like LS360ProxyAPI that simply provides a Project Object Model is pom. 
  	-->
  	<packaging>pom</packaging>
  	
  	<!-- The next section in the pom.xml lists the project’s submodules. These modules are defined in the modules element, and each
	      module element corresponds to a subdirectory of the LS360ApiGatewayModules/ directory. Maven knows to look in these 
	      directories for pom.xml files, and it will add submodules to the list of Maven projects included in a build. 
	-->
  	<modules>
    	<module>LmsRepository</module>
    	<module>LS360Util</module>
    	<module>LmsApi</module>
    	<module>OAuth2Authorization</module>
    	<module>LS360ApiGateway</module>
    	<module>LS360ApiGatewayService</module>
    	<module>StorefrontApi</module>
        <module>LcmsApi</module>
  </modules>
  	
  	<properties>
  	    <java-version>1.8</java-version>
  	
  	    <!-- Logging -->
		<log4j.version>2.7</log4j.version>
		<jboss-logging.version>3.3.0.Final</jboss-logging.version>
		<slf4j-api.verion>1.7.21</slf4j-api.verion>
  	
  	    <!-- Java -->
  	    <javax.inject.version>1</javax.inject.version>
  	    <javax.mail.version>1.5.6</javax.mail.version>
		<javax.inject.version>1</javax.inject.version>
		<javax.validation-api.version>1.1.0.Final</javax.validation-api.version>
		<javax.persistence.version>2.1.1</javax.persistence.version>
		<javax.transaction-api.version>1.2</javax.transaction-api.version>
  	
  	     <!-- java Web -->
  	    <javax.servlet-api.version>3.1.0</javax.servlet-api.version>
  	    <javax.websocket-api.version>1.1</javax.websocket-api.version>
  	    
  	    <!-- Expression Language -->
		<javax.el-api.version>3.0.0</javax.el-api.version>
  	    
  	    <!-- JSP -->
		<javax.servlet.jsp-api.version>2.3.1</javax.servlet.jsp-api.version>
		<javax.servlet.jsp.jstl.version>1.2.4</javax.servlet.jsp.jstl.version>
		<javax.servlet.jsp.jstl-api.version>1.2.1</javax.servlet.jsp.jstl-api.version>
  	
  	    <!-- Spring -->
		<spring.framework.version>4.3.3.RELEASE</spring.framework.version>
		<spring-data-jpa.version>1.11.23.RELEASE</spring-data-jpa.version>
		<spring.security.version>4.1.3.RELEASE</spring.security.version>
		
		<!-- Spring WS -->
		<spring-ws-core.version>2.4.0.RELEASE</spring-ws-core.version>
		<wsdl4j.version>1.6.3</wsdl4j.version>
		<xmlschema-core.version>2.2.1</xmlschema-core.version>
		
		<!-- Spring oauth2 -->
		<spring-security-oauth2.version>2.0.11.RELEASE</spring-security-oauth2.version>
		<spring-security-jwt.version>1.0.5.RELEASE</spring-security-jwt.version>
		
		<!-- Hibernate -->
		<hibernate-core.version>5.2.3.Final</hibernate-core.version>
		<hibernate-validator.version>5.2.4.Final</hibernate-validator.version>
		<javassist.version>3.20.0-GA</javassist.version>
		
		<!-- apache.commons -->
		<commons-collections4.version>4.1</commons-collections4.version>
		<commons-lang3.version>3.4</commons-lang3.version>
		
		<org.apache.httpcomponents.httpclient.version>4.5.2</org.apache.httpcomponents.httpclient.version>
		
		<jackson.version>2.8.3</jackson.version>
		
		<jaxb2-basics.version>0.11.0</jaxb2-basics.version>
		
		<!-- Unit testing -->
	    <junit.version>4.12</junit.version>
		
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<maven-compiler-plugin.version>3.5.1</maven-compiler-plugin.version>
		<maven-enforcer-plugin.version>1.4.1</maven-enforcer-plugin.version>
		<maven-dependency-plugin.version>2.10</maven-dependency-plugin.version>
		<maven-jar-plugin.version>2.6</maven-jar-plugin.version>
		<maven-resources-plugin.version>2.7</maven-resources-plugin.version>
		<maven-jaxb2-plugin.version>0.13.1</maven-jaxb2-plugin.version>
		<maven-javadoc-plugin.version>2.10.4</maven-javadoc-plugin.version>
		<maven-war-plugin.version>2.6</maven-war-plugin.version>
		
		<tomcat-directory-path>D:\Basit\apache-tomcat-8.5.4</tomcat-directory-path>
		
	</properties>
	
	<!-- These dependencies are not inherited to all submodules. Each submodule has to include these dependencies but without 
	    version and scope to ignore version conflicts in different sub modules modules. 
	-->
	<dependencyManagement>
	    <dependencies>
	    
	        <!-- Logging -->
	        
	        <dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>1.2</version>
			</dependency>
	        
		    <!-- provides the API for logging. This is the only Log4j dependency that is in compile scope in your application because it
            contains the only classes you should code against.
            
            Neither the Commons Logging API nor the SLF4J API is as complete and feature-rich as the Log4j 2 API. Choosing Commons 
            Logging or SLF4J means giving up some features, such as fatal logging, any-level logging, custom level logging, easy 
            method entry and exit logging, and message formatting with arguments. Using a logging façade is a much more important 
            thing to do in an independent library than in an application. If you are willing to sacrifice some Log4j 2 features, you
            can certainly choose SLF4J or Commons Logging over the Log4j 2 API. On the other hand, if you want to utilize all Log4j 2
            features and also use a logging façade, you could create your own façade to match the Log4j 2 API.
            -->
	        <dependency>
            	<groupId>org.apache.logging.log4j</groupId>
            	<artifactId>log4j-api</artifactId>
            	<version>${log4j.version}</version>
            	<scope>compile</scope>
        	</dependency>
        	
        	<!-- contains the standard Log4j 2 implementation. It is the implementation you are configuring, not the API. The API 
            requires no configuration.  
        	-->
       		<dependency>
	            <groupId>org.apache.logging.log4j</groupId>
	            <artifactId>log4j-core</artifactId>
	            <version>${log4j.version}</version>
	            <scope>runtime</scope>
        	</dependency>
        
	    	<!-- is an adapter to support the Commons Logging API. Several libraries you can use to log against the Commons Logging API,
            and this adapter causes Commons Logging to use Log4j 2 as its implementation.  
        	-->
	        <dependency>
	            <groupId>org.apache.logging.log4j</groupId>
	            <artifactId>log4j-jcl</artifactId>
	            <version>${log4j.version}</version>
	            <scope>runtime</scope>
	        </dependency>
        
	        <!--  is an SLF4J implementation adapter. Several libraries used throughout log against the SLF4J API, and this adapter 
	            causes SLF4J to use Log4j 2 as its implementation.
	        -->
	        <dependency>
	            <groupId>org.apache.logging.log4j</groupId>
	            <artifactId>log4j-slf4j-impl</artifactId>
	            <version>${log4j.version}</version>
	            <scope>runtime</scope>
	        </dependency>
          
	        <dependency>
	        	<groupId>org.apache.logging.log4j</groupId>
	        	<artifactId>log4j-jul</artifactId>
	        	<version>${log4j.version}</version>
	            <scope>runtime</scope>
	      	</dependency>
	      	
	      	<dependency>
	    		<groupId>org.apache.logging.log4j</groupId>
	    		<artifactId>log4j-web</artifactId>
	    		<version>${log4j.version}</version>
	    		<scope>runtime</scope>
  			</dependency>
	      	
	      	<dependency>
	            <groupId>org.slf4j</groupId>
	            <artifactId>slf4j-api</artifactId>
	            <version>${slf4j-api.verion}</version>
	            <scope>runtime</scope>
	        </dependency>
        
	        <dependency>
				<groupId>org.jboss.logging</groupId>
				<artifactId>jboss-logging</artifactId>
				<version>${jboss-logging.version}</version>
				<scope>runtime</scope>
			</dependency>
			
			 <dependency>
	            <groupId>javax.inject</groupId>
	            <artifactId>javax.inject</artifactId>
	            <version>${javax.inject.version}</version>
	            <scope>compile</scope>
	        </dependency>
	        
	        <!-- The JSR-303 Bean Validation API library. -->
       	    <dependency>
	    	    <groupId>javax.validation</groupId>
	    	    <artifactId>validation-api</artifactId>
	    	    <version>${javax.validation-api.version}</version>
	    	    <scope>compile</scope>
	        </dependency>
	        
	        <dependency>
				<groupId>javax.transaction</groupId>
				<artifactId>javax.transaction-api</artifactId>
				<version>${javax.transaction-api.version}</version>
			</dependency>
			
			<dependency>
            	<groupId>javax.websocket</groupId>
            	<artifactId>javax.websocket-api</artifactId>
            	<version>${javax.websocket-api.version}</version>
            	<scope>provided</scope>
        	</dependency>
	        
	        <!-- Servlet -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>${javax.servlet-api.version}</version>
				<scope>provided</scope>
			</dependency>
	        
	        <dependency>
				<groupId>javax.servlet.jsp</groupId>
				<artifactId>javax.servlet.jsp-api</artifactId>
				<version>${javax.servlet.jsp-api.version}</version>
				<scope>provided</scope>
			</dependency>
			
			<dependency>
	            <groupId>javax.el</groupId>
	            <artifactId>javax.el-api</artifactId>
	            <version>${javax.el-api.version}</version>
	            <scope>provided</scope>
	        </dependency>
		
			<dependency>
				<groupId>javax.servlet.jsp.jstl</groupId>
				<artifactId>javax.servlet.jsp.jstl-api</artifactId>
				<version>${javax.servlet.jsp.jstl-api.version}</version>
				<scope>compile</scope>
			</dependency>
		
			<!-- The exclusions are necessary because the JSTL implementation defines transient dependencies on older versions of the JSP
			     and Servlet specifications that have different Maven artifact IDs than the current versions. 
			-->
			<dependency>
				<groupId>org.glassfish.web</groupId>
				<artifactId>javax.servlet.jsp.jstl</artifactId>
				<version>${javax.servlet.jsp.jstl.version}</version>
				<scope>compile</scope>
				<exclusions>
					<exclusion>
						<groupId>javax.servlet</groupId>
						<artifactId>servlet-api</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.servlet.jsp</groupId>
						<artifactId>jsp-api</artifactId>
					</exclusion>
					<exclusion>
						<groupId>javax.servlet.jsp.jstl</groupId>
						<artifactId>jstl-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
  		
			<!-- Java Mail API
	    	    The javax.mail-api artifact is only good for compiling against. You actually need to run code, so you 
	    	    need a complete implementation of JavaMail. This is also needed along with the spring-context-support for emails
	    	-->
	    	<dependency>
				<groupId>com.sun.mail</groupId>
				<artifactId>javax.mail</artifactId>
				<version>${javax.mail.version}</version>
			</dependency>
  		
  		    <!-- Spring -->
  		    
  		    <dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-beans</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
			
			 <dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
  		    
	  		<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<!-- For sending email using spring java mail -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context-support</artifactId>
				<version>${spring.framework.version}</version>
			</dependency>
	  		
	  		<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-expression</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<dependency>
	    	    <groupId>org.springframework</groupId>
	    	    <artifactId>spring-jdbc</artifactId>
	    	    <version>${spring.framework.version}</version>
	    	    <scope>compile</scope>
	        </dependency>
	        
	        <dependency>
	    	    <groupId>org.springframework</groupId>
	    	    <artifactId>spring-tx</artifactId>
	    	    <version>${spring.framework.version}</version>
	    	    <scope>compile</scope>
	        </dependency>
        
	        <dependency>
	    	    <groupId>org.springframework</groupId>
	    	    <artifactId>spring-orm</artifactId>
	    	    <version>${spring.framework.version}</version>
	    	    <scope>compile</scope>
	        </dependency>
	        
	        <!-- Spring object-to-XML mapping module. -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
		 
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-aop</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<dependency>
    			<groupId>org.springframework</groupId>
    			<artifactId>spring-web</artifactId>
    			<version>${spring.framework.version}</version>
			</dependency>
			
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-webmvc</artifactId>
				<version>${spring.framework.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<dependency>
            	<groupId>org.springframework</groupId>
            	<artifactId>spring-websocket</artifactId>
            	<version>${spring.framework.version}</version>
            	<scope>compile</scope>
        	</dependency>
		
			<!-- Spring Security configuration module. -->
			<!-- jBCrypt is a Java implementation of OpenBSD's Blowfish password hashing code, as described in A Future-Adaptable 
		    Password Scheme. When used correctly, BCrypt is extremely strong. It is designed to be extremely slow. This may seem 
		    counterintuitive, but in reality it doesn’t add a significant amount of time to login or saving a user. Where the 
		    performance impact is felt is when generating billions of sample passwords in a dictionary attack — using a different 
		    salt for each password, it is extremely expensive and impractical to attack a compromised password database.
		    
		    You should never use a quick-hash algorithm like MD5 or any of the SHA algorithms, because modern password-hacking 
		    systems can generate billions of dictionary comparisons per second. BCrypt is the most powerful and well-tested 
		    password-hashing algorithm to date, and you should stick to it when securing user passwords. It uses an iteration count,
		    represented as a power of 2, to determine the number of rounds of hashing to apply. For example, with an input iteration
		    count of 10, hashing is applied 1,024 times. Each round uses a small, constant amount of memory that makes it difficult
		    to implement with hardware only, so modern password-hacking systems can generate only small numbers of dictionary 
		    comparisons per second.
		    
		    Spring Security includes a BCrypt implementation in its distribution.
		    -->
			<dependency>
	            <groupId>org.springframework.security</groupId>
	            <artifactId>spring-security-web</artifactId>
	            <version>${spring.security.version}</version>
	            <scope>compile</scope>
	        </dependency>
			
		 	<dependency>
		 		<groupId>org.springframework.security</groupId>
		 		<artifactId>spring-security-config</artifactId>
		 		<version>${spring.security.version}</version>
		 		<scope>compile</scope>
		 	</dependency>
			  
		 	<dependency>
		        <groupId>org.springframework.security</groupId>
		        <artifactId>spring-security-taglibs</artifactId>
		        <version>${spring.security.version}</version>
		        <scope>runtime</scope>
		    </dependency>
	        
	        <!-- Spring oauth2 -->
	        
	        <dependency>
    			<groupId>org.springframework.security.oauth</groupId>
    			<artifactId>spring-security-oauth2</artifactId>
    			<version>${spring-security-oauth2.version}</version>
			</dependency>
			
			<!-- Spring Security JWT is a small utility library for encoding and decoding JSON Web Tokens. It belongs to the family
			    of Spring Security crypto libraries that handle encoding and decoding text as a general, useful thing to be able to
			    do.  
			-->
	        <dependency>
    			<groupId>org.springframework.security</groupId>
    			<artifactId>spring-security-jwt</artifactId>
    			<version>${spring-security-jwt.version}</version>
			</dependency>
			
			<!-- Spring Web Services is a separate project related to and dependent on Spring Framework. It is meant to work 
			    side-by-side with existing Spring-based code, such as web controllers and RESTful endpoints. To use Spring Web Services,
			    you need an additional Maven dependency.
			    
			    The transient Java Streaming API for XML (StAX) dependency is excluded because it is part of the Java 6 and higher 
			    Standard Edition API.
			-->
			<dependency>
				<groupId>org.springframework.ws</groupId>
				<artifactId>spring-ws-core</artifactId>
				<version>${spring-ws-core.version}</version>
				<scope>compile</scope>
				<exclusions>
					<exclusion>
						<groupId>javax.xml.stream</groupId>
						<artifactId>stax-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			
			<!-- Spring-ws depends on this dependency -->
			<dependency>
				<groupId>wsdl4j</groupId>
				<artifactId>wsdl4j</artifactId>
				<version>${wsdl4j.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<!-- If you want to use multiple schemas, either by includes or imports, you will want to put Commons XMLSchema
		    on the class path. If Commons XMLSchema is on the class path, the <dynamic-wsdl> element will follow 
		    all XSD imports and includes, and will inline them in the WSDL as a single XSD. This greatly simplifies the
		    deployment of the schemas, which still making it possible to edit them separately.
			-->
			<dependency>
				<groupId>org.apache.ws.xmlschema</groupId>
				<artifactId>xmlschema-core</artifactId>
				<version>${xmlschema-core.version}</version>
			</dependency>
	  		
	        <!-- Spring Data module for JPA repositories. -->
	        <dependency>
				<groupId>org.springframework.data</groupId>
				<artifactId>spring-data-jpa</artifactId>
				<version>${spring-data-jpa.version}</version>
				<scope>compile</scope>
	            <exclusions>
	                <exclusion>
	                    <groupId>org.slf4j</groupId>
	                    <artifactId>jcl-over-slf4j</artifactId>
	                </exclusion>
	            </exclusions>
			</dependency>
			 
	        <dependency>
	            <groupId>org.eclipse.persistence</groupId>
	            <artifactId>javax.persistence</artifactId>
	            <version>${javax.persistence.version}</version>
	            <scope>compile</scope>
	        </dependency>
            
            <!-- Hibernate entity manager with JPA 2 support merge in hibernate-core from hibrnate 5.2 omwards.  -->
            <dependency>
    			<groupId>org.hibernate</groupId>
    			<artifactId>hibernate-core</artifactId>
    			<version>${hibernate-core.version}</version>
    			<scope>compile</scope>
	              <exclusions>
	                <exclusion>
	                    <groupId>org.hibernate.javax.persistence</groupId>
	                    <artifactId>hibernate-jpa-2.1-api</artifactId>
	                </exclusion>
	                <exclusion>
	                    <groupId>org.jboss.spec.javax.transaction</groupId>
	                    <artifactId>jboss-transaction-api_1.2_spec</artifactId>
	                </exclusion>
	                <exclusion>
	                    <groupId>xml-apis</groupId>
	                    <artifactId>xml-apis</artifactId>
	                </exclusion>
	                <exclusion>
	                    <groupId>org.jboss.logging</groupId>
	                    <artifactId>jboss-logging</artifactId>
	                </exclusion>
	                 <exclusion>
	                    <groupId>org.javassist</groupId>
	                    <artifactId>javassist</artifactId>
	                </exclusion>
	            </exclusions> 
			</dependency>
             
			<!-- Javassist (JAVA programming ASSISTant) makes Java bytecode manipulation simple. It is a class library for editing 
	            bytecodes in Java.  
	        -->
	        <dependency>
				<groupId>org.javassist</groupId>
				<artifactId>javassist</artifactId>
				<version>${javassist.version}</version>
				<scope>runtime</scope>
			</dependency>
		
			<!-- Hibernate Validator excludes the transient JBoss Logging API dependency(Hibernate use this instead of Commons Logging as
			    their logging API), and that a runtime JBoss Logging dependency is seperately declared. The hibernate-validator artifact
			    declares a dependency on a jboss-logging version that doesn't support Log4j2, so it is necessary to declare a newer
			    dependency that does. The exclusion isn't strictly necessary, but is shown for clarity.
			-->
			<dependency>
				<groupId>org.hibernate</groupId>
				<artifactId>hibernate-validator</artifactId>
				<version>${hibernate-validator.version}</version>
				<scope>runtime</scope>
				<exclusions>
					<exclusion>
						<groupId>org.jboss.logging</groupId>
						<artifactId>jboss-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
		
			<dependency>
	            <groupId>org.hibernate</groupId>
	            <artifactId>hibernate-validator-annotation-processor</artifactId>
	            <version>${hibernate-validator.version}</version>
	            <scope>compile</scope>
	            <optional>true</optional>
	        </dependency>
	        
	        <!-- Apache HTTP Components project. The HTTP client library will be used for RESTful-WS invocation. -->
			<dependency>
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${org.apache.httpcomponents.httpclient.version}</version>
			</dependency>
		
			<!-- The Apache Commons Collections package contains types that extend and augment the Java Collections Framework. -->
			<dependency>
	      		<groupId>org.apache.commons</groupId>
	      		<artifactId>commons-collections4</artifactId>
	      		<version>${commons-collections4.version}</version>
	    	</dependency>
    	
	    	<!-- Apache Commons Lang, a package of Java utility classes for the classes that are in java.lang's 
	    		hierarchy, or are considered to be so standard as to justify existence in java.lang. Maven dependency 
	    		for org.apache.commons.lang.StringUtils, DateUtils etc 
	    	-->
	    	<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
				<scope>compile</scope>
			</dependency>
	        
	        <!-- Inspired by the quality and variety of XML tooling available for the Java platform (StAX, JAXB, etc.),
		     the Jackson is a multi-purpose Java library for processing JSON data format. Jackson aims to be the 
		     best possible combination of fast, correct, lightweight, and ergonomic.
		     
		     jackson-core is part of Jackson that defines Streaming API as well as basic shared abstractions  
	        -->
	        <dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson.version}</version>
				<scope>compile</scope>
			</dependency>
		
			<!-- General data-binding package for Jackson (2.x): works on streaming API (core) implementation(s) -->
			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<dependency>
	            <groupId>com.fasterxml.jackson.core</groupId>
	            <artifactId>jackson-annotations</artifactId>
	            <version>${jackson.version}</version>
	            <scope>compile</scope>
	        </dependency>
			
			<!-- Add-on module to support JSR-310 (Java 8 Date & Time API) data types -->
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-jsr310</artifactId>
				<version>${jackson.version}</version>
				<scope>compile</scope>
			</dependency>
			
			<dependency>
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-hibernate5</artifactId>
				<version>${jackson.version}</version>
			</dependency>
			
			<dependency>
            	<groupId>org.jvnet.jaxb2_commons</groupId>
            	<artifactId>jaxb2-basics-runtime</artifactId>
            	<version>${jaxb2-basics.version}</version>
        	</dependency>
        	
        	<dependency>
				<groupId>org.glassfish.jaxb</groupId>
				<artifactId>jaxb-jxc</artifactId>
				<version>2.2.11</version>
			</dependency>
			
	    </dependencies>
	</dependencyManagement>
	
	<!-- These dependency inherited to all sub modules -->
	<dependencies>
	
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.framework.version}</version>
			<scope>test</scope>
		</dependency>
		
	</dependencies>
	
	<!-- Lastly, we define some settings which will be inherited by all submodules. The Dashboard build configuration configures
	     the target for all Java compilation to be the Java 8 JVM. Since the compiler plugin is bound to the lifecycle by default,
	     we can use the pluginManagement section do to this. The separation between providing configuration to default plugins and 
	     actually binding plugins is much easier to see when they are separated this way. The dependencies element adds dependencies 
	     as a global dependency. Both the build configuration and the dependencies are inherited by all submodules. Using POM 
	     inheritance allows you to add common dependencies for universal dependencies like JUnit or Log4J.
	-->
	<build>
	    <finalName>${project.artifactId}</finalName>
	    <pluginManagement>
	    	<plugins>
	    	
	    	<!-- Ignore/Execute plugin execution -->
    			<plugin>
        			<groupId>org.eclipse.m2e</groupId>
        			<artifactId>lifecycle-mapping</artifactId>
        			<version>1.0.0</version>
        			<configuration>
            			<lifecycleMappingMetadata>
               				 <pluginExecutions>
                    			
                    			<pluginExecution>
                        			<pluginExecutionFilter>
                            			<groupId>org.hibernate.orm.tooling</groupId>
                            			<artifactId>hibernate-enhance-maven-plugin</artifactId>
                           				<versionRange>[1.0.0,)</versionRange>
                            			<goals>
                                			<goal>enhance</goal>
                            			</goals>
                        			</pluginExecutionFilter>
                        			<action>
                            			<ignore/>
                        			</action>
                    			</pluginExecution>
                			</pluginExecutions>
            			</lifecycleMappingMetadata>
        			</configuration>
    			</plugin>
	    	
			<!-- Maven compiler plugin -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${maven-compiler-plugin.version}</version>
					<configuration>
						<source>${java-version}</source>
						<target>${java-version}</target>
						<compilerArgument>-Xlint:all</compilerArgument>
						<showWarnings>true</showWarnings>
						<showDeprecation>true</showDeprecation>
					</configuration>
				</plugin>
				
				<plugin>
        			<groupId>org.apache.maven.plugins</groupId>
        			<artifactId>maven-enforcer-plugin</artifactId>
        			<version>${maven-enforcer-plugin.version}</version>
        			<executions>
          				<execution>
            				<id>enforce-versions</id>
            				<goals>
              					<goal>enforce</goal>
            				</goals>
            				<configuration>
              					<rules>
                					<requireJavaVersion>
                  						<version>${java-version}</version>
                					</requireJavaVersion>
              					</rules>
            				</configuration>
          				</execution>
        			</executions>
      			</plugin>
      			
				 <!-- To generate Java classes from the WSDL in maven, you need the following plugin setup. This setup will generate 
  		    	 		classes for the WSDL found at the specified URL, putting those classes in the package specified in the 
  		    	 		generatePackag element(i.e hello.wsdl).  
  		    	-->
  				<plugin>
    				<groupId>org.jvnet.jaxb2.maven2</groupId>
    				<artifactId>maven-jaxb2-plugin</artifactId>
    				<version>${maven-jaxb2-plugin.version}</version>
				</plugin>	
				
				<!-- Up to JDK 7, the Javadoc tool was pretty lenient. As a developer, you could write anything that vaguely resembled 
    			HTML and the tool would rarely complain beyond warnings. Thus you could have @link references that were inaccurate 
    			(such as due to refactoring) and the tool would simply provide a warning.
    			
    			With JDK 8, a new part has been added to Javadoc called doclint and it changes that friendly behaviour. In 
    			particular, the tool aim to get conforming W3C HTML 4.01 HTML (despite the fact that humans are very bad at matching
    			conformance wrt HTML).
    			
    			With JDK 8, you are unable to get Javadoc unless your tool meets the standards of doclint. Some of its rules are:

    				no self-closed HTML tags, such as <br /> or <a id="x" />
    				no unclosed HTML tags, such as <ul> without matching </ul>
    				no invalid HTML end tags, such as </br>
    				no invalid HTML attributes, based on doclint's interpretation of W3C HTML 4.01
    				no duplicate HTML id attribute
    				no empty HTML href attribute
    				no incorrectly nested headers, such as class documentation must have <h3>, not <h4>
    				no invalid HTML tags, such as List<String> (where you forgot to escape using &lt;)
    				no broken @link references
    				no broken @param references, they must match the actual parameter name
    				no broken @throws references, the first word must be a class name
    				
    			Note that these are errors, not warnings. Break the rules and you get no Javadoc output.  
    			
    			 The magic incantation you need is -Xdoclint:none. This goes on the command line invoking Javadoc.
    			 If you are running from maven, you need to use the additionalparam setting, as per the manual. Either add it as a 
    			 global property:

  					<properties>
    					<additionalparam>-Xdoclint:none</additionalparam>
  					</properties>

				or add it to the maven-javadoc-plugin: 
    			-->
    			<plugin>
      				<groupId>org.apache.maven.plugins</groupId>
      				<artifactId>maven-javadoc-plugin</artifactId>
      				<version>${maven-javadoc-plugin.version}</version>
      				<configuration>
        				<additionalparam>-Xdoclint:none</additionalparam>
      				</configuration>
    			</plugin>	 	
			</plugins>
	    </pluginManagement>
	    <plugins>
	    </plugins>
	</build>
  	
</project>